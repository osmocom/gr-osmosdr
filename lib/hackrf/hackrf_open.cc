/* -*- c++ -*- */
/*
 * Copyright 2013 Dimitri Stolnikov <horiz0n@gmx.net>
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#include "hackrf_open.h"

#include <boost/lexical_cast.hpp>

int hackrf_device_open(std::string * hackrf_serial, hackrf_device** _dev) {
  int ret;

#ifdef LIBHACKRF_HAVE_DEVICE_LIST
  if ((hackrf_serial != NULL) && hackrf_serial->length() > 0) {
    if (hackrf_serial->length() > 1) {
      ret = hackrf_open_by_serial( hackrf_serial->c_str(), _dev );
    } else {
        int dev_index = 0;
        try {
          dev_index = boost::lexical_cast< int >( *hackrf_serial );
        } catch ( std::exception &ex ) {
          throw std::runtime_error(
                "Failed to use '" + *hackrf_serial + "' as HackRF device index number: " + ex.what());
        }

        hackrf_device_list_t *list = hackrf_device_list();

        std::cerr << "Found " << list->devicecount << " devices in hackrf device list" << std::endl;
        std::cerr << "Provided device index: " << dev_index << std::endl;

        if (dev_index < list->devicecount) {
          ret = hackrf_device_list_open(list, dev_index, _dev);

          std::cerr << "Device open rv: " << ret << std::endl;
        } else {
          hackrf_device_list_free(list);
          throw std::runtime_error(
                "Failed to use '" + *hackrf_serial + "' as HackRF device index: not enough devices");
        }
        hackrf_device_list_free(list);
    }
  } else
#endif
    ret = hackrf_open( _dev );
    
  return ret;
}

